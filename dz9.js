'use strict';

let a = 5,
  b = a;

b = b + 5;
console.log(b);
console.log(a);

// объекты: рассмотрим поведение передача по ссылке
const objct = {
  a: 5,
  b: 1,
};

const copya = objct; // здесь передаем значение по ссылке
copya.a = 10; // модифицируя копию мы модифицируем изначальные объект
console.log(copya);
console.log(objct);

// Первый способ с циклами. Чтобы создать копию объекта используем цикл
/* эта функция при помощи цикла создаст новый объек уже перебирая старые св-ва которые были в объекте*/

const obj = {
  a: 5,
  b: 1,
};

function copy(mainObj) {
  let objCopy = {};

  let key;
  for (key in mainObj) {
    objCopy[key] = mainObj[key];
  }
  return objCopy;
}

const numbers = {
  a: 2,
  b: 5,
  c: {
    x: 7,
    y: 4,
  }
};
/* создали поверхносную копию объекта:
- будет работать такое клонирование только со св-вами кот. лежат на первом уровне*/
const newNumbers = copy(numbers); // совершили клонирование

newNumbers.a = 10;
newNumbers.c.x = 10; /* здесь будет иметь ссылочный тип данных, нужно глубокое клонирование*/
console.log(newNumbers);
console.log(numbers);

/* Второй способ - Object.assign() метод кот. позволяет соединить сразу несколько объектов */

// создаем независимую поверхностную копию объекта:
// соединим объект add с объектом numbers
const add = {
  d: 17,
  e: 20
};
/* первым аргументом пишем тот объект в кот. хотим все поместить(numbers), 
вторым - тот объект который мы помещаем(add) */
console.log(Object.assign(numbers, add));
/*создали независимую поверхностную копию объекта:
{ a: 2, b: 5, c: { x: 10, y: 4 }, d: 17, e: 20 } */


/* то же самое делаем с пустым объектом, чтобы создать просто копию объекта
console.log(Object.assign({}, add));
- пишем пустой объект, так у нас создается новый объект
в него помещается старый объект в нашем случае объект add
и мы получаем какуе-то отдельную копию*/

// протестируем это: в clone лежит поверхностная копия предыдущего объекта
const clone = Object.assign({}, add); // результат работы этой команды записываем в новый объект

clone.d = 20;
console.log(add);
console.log(clone);
/* Вывод будет таким:
{ d: 17, e: 20 }
{ d: 20, e: 20 }
*/


// клонирование массивов:

// создадим копию массива
const oldArray = ['a', 'b', 'c'];
const newArrays = oldArray;/* таким спо-бом положится ссылка на массив, изменяя newArray мы будем менят oldArray*/

// чтобы создать копию ставим точку и прописываем .slice()
/* метод slice() - позволяет скопировать старый массив, в него можно передать аргументы по количеству этиъ элементов*/

const newArray = oldArray.slice();
newArray[1] = 'bigphrase';
console.log(newArray);
console.log(oldArray);

// новые стандарты ES6 ES8
/* Четвертый способ создания поверхностной копии есть-
использование оператора разворота(он разворачивает структуру и превращает ее в набор каких-то данных) */

//испо-м спред оператор, для этого ставим троеточие перед переменной
// этот способ позв-т вытащить все элементы и поместить в переменню internet
const video = ['youtube', 'vimeo', 'rutube'],
      blogs = ['wordpress', 'livejournal', 'blogger'], 
      internet = [...video, ...blogs, 'vk', 'Facebook'];
         
console.log(internet);
/* оператор разворота развернул структуры на отдельные элементыб вывод будет таким:
[
  'youtube',
  'vimeo',
  'rutube',
  'wordpress',
  'livejournal',
  'blogger',
  'vk',
  'Facebook'
]
*/

// второй пример, создадим функцию:

function log(a, b, c) {
      console.log(a);
      console.log(b);
      console.log(c);
}

const num = [2, 5, 7]; 

log(...num);

// еще пример
const array = ["a", "b"];

const newAarray = [...array];// здесь теперь лежит новая копия массива array

console.log(newAarray);

// пример для объектов

 const q ={
     one: 1,
     two: 2  
 };

 //для создании копии используем спред оператор
 const newObj = {...q}; /* чтобы поместить в newObj все что находится в объекте q ставим троеточие перед объектом q */

 